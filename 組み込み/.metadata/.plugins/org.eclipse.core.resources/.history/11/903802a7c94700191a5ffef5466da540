
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2019 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f3xx_hal.h"
#include "adc.h"
#include "dma.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* USER CODE BEGIN Includes */
#include "management.h"
#include <stdio.h>
/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
void Calibration();
void state_print();
void test();
void main_run();
void main_run2();
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
uint8_t mode;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_ADC2_Init();
  MX_ADC3_Init();
  MX_USART1_UART_Init();
  MX_ADC4_Init();
  MX_USART2_UART_Init();
  MX_USART3_UART_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_TIM6_Init();
  MX_I2C1_Init();
  MX_UART4_Init();
  MX_TIM8_Init();
  MX_TIM4_Init();
  MX_TIM3_Init();
  MX_TIM17_Init();
  MX_TIM15_Init();
  MX_TIM16_Init();
  /* USER CODE BEGIN 2 */
  xprintf_init(&huart1);
  JY901_init(&hi2c1);
  oled_i2c_to_oled(&hi2c1);
  DFPlayer_init(&huart4);
  oled_returnhome();
  oled_puts("Is The Order a");
  oled_setcursor(1,2);
  oled_puts("Lancer Robot?");
  HAL_Delay(500);
  DFPlayer_setvolume(0x10);
  HAL_Delay(200);
  DFPlayer_playmp3(3);
  HOUI_def=JY901_def_set();

  if(HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK){Error_Handler();}
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
  TIM3->CNT=30000;


  if(HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK){Error_Handler();}
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
  TIM4->CNT=30000;

  if(HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK){Error_Handler();}
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
  TIM8->CNT=30000;


  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCdata1,9) != HAL_OK){Error_Handler();}

  if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *)ADCdata2,sizeof(ADCdata2)) != HAL_OK){Error_Handler();}

  if (HAL_ADC_Start_DMA(&hadc3, (uint32_t *)ADCdata3,sizeof(ADCdata3)) != HAL_OK){Error_Handler();}

  if (HAL_ADC_Start_DMA(&hadc4, (uint32_t *)ADCdata4,sizeof(ADCdata4)) != HAL_OK){Error_Handler();}

  if (HAL_UART_Receive_DMA(&huart2, (uint8_t *)Rxbuf,sizeof(Rxbuf)) != HAL_OK){Error_Handler();}

  HOUI_def=JY901_def_set();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  mofu:
	  	  	  mode=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)*4+HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)*2
	  	  			  +HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14);
	  	  	  switch(mode){
	  	  	  case 1:
	  	  		  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==1){
	  	  			  HOUI_def=JY901_def_set();
	  	  			  while(HAL_GPIO_ReadPin(GPIOF,GPIO_PIN_9)){
							char s1[8] = {'\0'};
							servo(90,100,90,90);
							ics_set_pos1(0,map_a(90,0,180,4833,10166));
							ics_set_pos1(1,map_a(90,0,180,4833,10166));
							motor_move(0,0,0);
							xprintf("digree=%d\r\n",line_get_data_poorly_made());
							oled_returnhome();
							oled_puts("main_run waiting ");
							oled_setcursor(1,0);
							oled_puts("                 ");
							oled_setcursor(1,8);
							oled_puts((char *)sprintf(s1, "%d",line_get_data_poorly_made()));
							if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0){goto mofu;}
							HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
	  	  			  	}
	  	  			    DFPlayer_playmp3(6);
	  	  			  	oled_clear();
	  	  			    oled_returnhome();
	  	  			    oled_puts("main_run select ");
	  	  			    oled_setcursor(1,0);
	  	  			    oled_puts("running");

					    TIM3->CNT=3000;
					    TIM4->CNT=3000;
					    TIM8->CNT=3000;
					    marker_count_data=0;
					    marker_count_data_=0;
					    while(HAL_GPIO_ReadPin(GPIOF,GPIO_PIN_9)==0){
	  	  			  		main_run();
	  	  			  	}
	  	  				servo(90,100,90,90);
		  	  			ics_set_pos1(0,map_a(90,0,180,4833,10166));
		  	  			ics_set_pos1(1,map_a(90,0,180,4833,10166));
	  	  				motor_move(0,0,0);
	  	  		  }
	  	  		  else{
	  	  			  servo(90,100,90,90);
	  	  			  ics_set_pos1(0,map_a(90,0,180,4833,10166));
	  	  			  ics_set_pos1(1,map_a(90,0,180,4833,10166));
	  	 	  	  	  motor_move(0,0,0);
	  	  			  oled_returnhome();
	  	  			  oled_puts("main_run select");
	  	  			  oled_setcursor(1,0);
	  	  			  oled_puts("OK?     waiting ");
	  	  			  HAL_Delay(5);
	  	  		  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
	  	  		  }
	  	  	  break;

	  	  	  case 2:
	  	  		  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==1){
	  	  			  HOUI_def=JY901_def_set();
	  	  			  while(HAL_GPIO_ReadPin(GPIOF,GPIO_PIN_9)){
	  	  				servo(90,100,90,90);
		  	  			ics_set_pos1(0,map_a(90,0,180,4833,10166));
		  	  			ics_set_pos1(1,map_a(90,0,180,4833,10166));
	  	  				motor_move(0,0,0);
	  	  			    oled_returnhome();
	  	  			    oled_puts("main_run2 select");
	  	  			    oled_setcursor(1,0);
	  	  			    oled_puts("waiting         ");
	  	  			  	if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==1){goto mofu;}
	  	  			  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
	  	  			  	}
	  	  			    DFPlayer_playmp3(6);
	  	  			  	oled_clear();
	  	  			    oled_returnhome();
	  	  			    oled_puts("main_run2 select");
	  	  			    oled_setcursor(1,0);
	  	  			    oled_puts("running         ");
	  	  			  	while(HAL_GPIO_ReadPin(GPIOF,GPIO_PIN_9)==1){
	  	  			  		main_run();
	  	  			  	}
	  	  				servo(90,100,90,90);
		  	  			ics_set_pos1(0,map_a(90,0,180,4833,10166));
		  	  			ics_set_pos1(1,map_a(90,0,180,4833,10166));
	  	  				motor_move(0,0,0);
	  	  		  }
	  	  		  else{
	  	  			  servo(90,100,90,90);
	  	  			  ics_set_pos1(0,map_a(90,0,180,4833,10166));
	  	  			  ics_set_pos1(1,map_a(90,0,180,4833,10166));
	  	 	  	  	  motor_move(0,0,0);
	  	  			  oled_returnhome();
	  	  			  oled_puts("main_run2 select");
	  	  			  oled_setcursor(1,0);
	  	  			  oled_puts("OK?     waiting ");
	  	  			  HAL_Delay(5);
	  	  		  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
	  	  		  }

	  	  	  break;

	  	  	  case 3:
	  	  		  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==1){
  	  			  test();
  	  			  servo(90,100,90,90);
  	  			  ics_set_pos1(0,map_a(90,0,180,4833,10166));
  	  			  ics_set_pos1(1,map_a(90,0,180,4833,10166));
  	 	  	  	  motor_move(0,0,0);
  	  			  oled_returnhome();
  	  			  oled_puts("test_mode select");
  	  			  oled_setcursor(1,0);
  	  			  oled_puts("running         ");
  	  		  }
  	  		  else{
  	  			  servo(90,100,90,90);
  	  			  ics_set_pos1(0,map_a(90,0,180,4833,10166));
  	  			  ics_set_pos1(1,map_a(90,0,180,4833,10166));
  	 	  	  	  motor_move(0,0,0);
  	  			  oled_returnhome();
  	  			  oled_puts("test_mode select");
  	  			  oled_setcursor(1,0);
  	  			  oled_puts("OK?     waiting ");
  	  			  HAL_Delay(5);
  	  		  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
  	  		  }

	  	  	  break;

	  	  	  case 4:
	  	  		  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==1){
  	  			  state_print();
  	  			  servo(90,100,90,90);
  	  			  ics_set_pos1(0,map_a(90,0,180,4833,10166));
  	  			  ics_set_pos1(1,map_a(90,0,180,4833,10166));
  	 	  	  	  motor_move(0,0,0);
  	  			  oled_returnhome();
  	  			  oled_puts("State     select");
  	  			  oled_setcursor(1,0);
  	  			  oled_puts("running         ");
  	  		  }
  	  		  else{
  	  			  servo(90,100,90,90);
  	  			  ics_set_pos1(0,map_a(90,0,180,4833,10166));
  	  			  ics_set_pos1(1,map_a(90,0,180,4833,10166));
  	 	  	  	  motor_move(0,0,0);
  	  			  oled_returnhome();
  	  			  oled_puts("State     select");
  	  			  oled_setcursor(1,0);
  	  			  oled_puts("OK?     waiting ");
  	  			  HAL_Delay(5);
  	  		  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
  	  		  }

	  	  	  break;

	  	  	  case 5:
	  	  			oled_returnhome();
	  	  			oled_puts("Calib select");
	  	  			oled_setcursor(1,0);
	  	  		  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==1){
	  	  			  Calibration();
	  	  		  }
	  	  		  else{
	  	  			  oled_puts("OK?     waiting ");
	  	  			   HAL_Delay(5);
	  	  			   servo(90,100,90,90);
	  	  			   ics_set_pos1(0,map_a(90,0,180,4833,10166));
	  	  			   ics_set_pos1(1,map_a(90,0,180,4833,10166));
	  	  			   motor_move(0,0,0);
	  	  			  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
	  	  		  }
	  	  	  break;

	  	  	  default:
	  	  	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
	  	  		  servo(90,100,90,90);
	  	  	  	  motor_move(0,0,0);
	  	  	  	  oled_returnhome();
	  	  	  	  oled_puts("select mode     ");
	  	  	  	  oled_setcursor(1,0);
	  	  	  	  oled_puts("           SURF ");
	  	  	  	  HAL_Delay(5);
	  	  	  break;
	  	  	  }


  }
  /* USER CODE END 3 */

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_TIM8;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* USER CODE BEGIN 4 */


void main_run(){
		float calc=0;
		char s1[8] = {'\0'};
		uint16_t digree_now;
		digree_now=line_get_data_poorly_made();
		if(line_get_marker()==10){
			marker_count_data++;
		}
		if(marker_count_data>10){
			marker_count_data=0;
		}
		if(marker_count_data_ != marker_count_data){
			marker_count_data_=marker_count_data;
 			 TIM3->CNT=30000;
		}

	  if(digree_now<360){
		  if(marker_count_data==1 ){
			  if((TIM3->CNT)>29700 && (TIM3->CNT)<29830){
	  			   ics_set_pos1(0,map_a(120,0,180,4833,10166));
			  }
			  else{
				  ics_set_pos1(0,map_a(90,0,180,4833,10166));
			  }
		  }
		  if(marker_count_data==2){
			  if((TIM3->CNT)>29700 && (TIM3->CNT)<29830){
	  			   ics_set_pos1(0,map_a(120,0,180,4833,10166));
			  }
			  else{
				  ics_set_pos1(0,map_a(90,0,180,4833,10166));
			  }
		  }
		  if(marker_count_data==3){
			  if((TIM3->CNT)>29800 && (TIM3->CNT)<29900){
					 motor_move(0,0,0);
					 TIM2->CNT=30000;
					 while(TIM2->CNT>29400){
						 HOUI_Correction(0);
						 motor_move(125,270,800);
					 }
				 while(digree_now==1000){
					 HOUI_Correction(0);
					 motor_move(125,270,800);
				 }
				 motor_move(0,0,0);
				 HOUI_Correction(180);
			  }
			 else{
				 if(digree_now<180){
					 calc=digree_now*(sqrt(digree_now*2))/16;
					 HOUI_Correction(0);
					 motor_move(125,(uint16_t)calc,800);
				 }
				 else{
					 calc=(360-digree_now)*(sqrt((360-digree_now)*2))/16;
					 HOUI_Correction(0);
					 motor_move(125,(uint16_t)(360.0-calc),800);
				 }
			  }
		  }
		  /*if(marker_count==3){

		  }
		  else if(marker_count==9){

		  }
		  else{*/
			  if(marker_count_data<3){
			  	  if(digree_now<180){
				  calc=digree_now*(sqrt(digree_now*2))/16;
				  HOUI_Correction(0);
				  motor_move(125,(uint16_t)calc,800);
			  	  }
			  	  else{
					  calc=(360-digree_now)*(sqrt((360-digree_now)*2))/16;
					  HOUI_Correction(0);
					  motor_move(125,(uint16_t)(360.0-calc),800);
			  	  }
			  }
			  else{if(digree_now<180){
				  calc=digree_now*(sqrt(digree_now*2))/16;
				  HOUI_Correction(180);
				  motor_move(125,(uint16_t)calc,800);
			  	  }
			  	  else{
					  calc=(360-digree_now)*(sqrt((360-digree_now)*2))/16;
					  HOUI_Correction(180);
					  motor_move(125,(uint16_t)(360.0-calc),800);
			  	  }
			  }

				  xprintf(" m1=%d", TIM3->CNT);
				  xprintf(" m2=%d", TIM4->CNT);
				  xprintf(" m3=%d", TIM8->CNT);
			  xprintf(" count=%d",marker_count_data);
			  xprintf(" count=%d",marker_count_data_);
			  xprintf(" digree=%d",digree_now);
			  xprintf(" calc=%d\r\n",(uint16_t)calc);

			  oled_setcursor(1,8);
			  oled_puts((char *)sprintf(s1, "%d",digree_now));
		  //}
	  }
	  else{motor_move(0,0,0);}
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);

}
void main_run2(){


	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
}


void test(){


	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
}



void state_print(){
	  xprintf(" m1=%d", TIM3->CNT);
	  xprintf(" m2=%d", TIM4->CNT);
	  xprintf(" m3=%d", TIM8->CNT);
	  xprintf(" 1=%d",ADCdata1[0]);
	  xprintf(" 2=%d",ADCdata1[1]);
	  xprintf(" 3=%d",ADCdata1[2]);
	  xprintf(" 4=%d",ADCdata1[3]);
	  xprintf(" 5=%d",ADCdata1[4]);
	  xprintf(" 6=%d",ADCdata1[5]);
	  xprintf(" 7=%d",ADCdata1[6]);
	  xprintf(" 8=%d",ADCdata1[7]);
	  xprintf(" 9=%d",ADCdata1[8]);
	  xprintf(" 10=%d",ADCdata2[0]);
	  xprintf(" 11=%d",ADCdata2[1]);
	  xprintf(" 12=%d",ADCdata2[2]);
	  xprintf(" 13=%d",ADCdata2[3]);
	  xprintf(" 14=%d",ADCdata2[4]);
	  xprintf(" 15=%d",ADCdata3[1]);
	  xprintf(" 16=%d",ADCdata3[2]);
	  xprintf(" 17=%d",ADCdata3[3]);
	  xprintf(" 18=%d",ADCdata3[0]);
	  xprintf(" 19=%d",ADCdata3[4]);
	  xprintf(" 20=%d",ADCdata3[5]);
	  xprintf(" 21=%d",ADCdata3[6]);
	  xprintf(" 22=%d",ADCdata3[7]);
	  xprintf(" 23=%d",ADCdata3[8]);
	  xprintf(" 24=%d",ADCdata3[9]);
	  xprintf(" R1=%d",ADCdata4[2]);
	  xprintf(" R2=%d",ADCdata4[3]);
	  xprintf(" R3=%d",ADCdata4[4]);
	  xprintf(" L1=%d",ADCdata4[1]);
	  xprintf(" L2=%d",ADCdata4[0]);
	  xprintf(" L3=%d",ADCdata3[10]);
	  xprintf(" Dig=%d",JY901_yaw_get(HOUI_def));
	  xprintf(" theta=%d",line_get_data_poorly_made());
	  xprintf(" angle=%d",line_get_angle());
	  xprintf(" deviation=%d",line_get_deviation());
	  xprintf(" marker=%d", line_get_marker());
	  xprintf("\r\n");
	  HAL_Delay(50);
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_10);
}


void Calibration(){
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==1){
	motor_move(0,0,0);
	oled_returnhome();
	oled_puts("Calib select    ");
	oled_setcursor(1,0);
	oled_puts("turn on startSW ");
	HAL_Delay(5);
    if(HAL_GPIO_ReadPin(GPIOF,GPIO_PIN_9)==0){	//press RS
    DFPlayer_playmp3(8);
	oled_clear();
	oled_returnhome();
	oled_puts("Angular velocity");
	oled_setcursor(1,0);
	oled_puts("    Calibration ");
	JY901_calibration(2000,1);
	oled_clear();
	oled_returnhome();
	oled_puts("Magnetic");
	oled_setcursor(1,0);
	oled_puts(" Calibration  RS");
	xprintf("houi cab\r\n");
	motor_move(200,0,200);
	JY901_calibration(12000,2);
	motor_move(0,0,0);
	oled_clear();
	oled_returnhome();
	oled_puts("Calibration End ");
	xprintf("cab end\r\n");
	JY901_calibration(100,3);
	xprintf("save\r\n");
	JY901_calibration(100,4);
	DFPlayer_stopmp3();
}
}
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	int j = 0;
	while (Rxbuf[j] != 251 && j<(sizeof(Rxbuf))) {
		j++;
	}
	if(j>=sizeof(Rxbuf)){
		for(int k=0; k<sizeof(Rxbuf)-1; k++){
			data[k]=0;
		}
	}
	else {
		for (int k = 0; k < (sizeof(Rxbuf)); k++) {
			if ((j + k) >= sizeof(Rxbuf)) {
				data[k] = Rxbuf[k - (sizeof(Rxbuf) - j)];
			}
			else {
				data[k] = Rxbuf[j + k + 1];
			}
		}

		Flug_Rxdata=1;
	}
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
